5/25/2015 8:15:27 PM
I am trying to load a batch-macro with load commands. The file structure looks like this:

- load_modules.e
- align_chars
  - alignchars.e
- escape_string
  - string_paste.e

load_modules.e is in the current directory and then alignchars.e is in the align-chars
directory which is at the same level as load_modules.e

When I try to load the bach macro I get this error:
"Path not found"

    [code]
        #pragma option(strict, on)
        #include "slick.sh"

        /**
         * Load emulations and commands.
         * Slick-C batch macro.
         */
        defmain() {
          load("align_chars\\alignchars.e");
          load("escape_string\\string_paste.e");

          return 0;
        }
    [/code]

5/25/2015 9:21:53 PM
How can I tell slickedit to load a macro before attempting to load the 
current one.  For example, if I load the macro below "PrintMacro2", it 
will complain that it needs "hs2_cur_word_sel" even though it compiles 
fine.  I want it to load "hs2_cur_word_sel" before it compiles.

[code]
    // The 'VSARG2_MARK' is added to get hs2_cur_word_sel to work correctly.
    _command void PrintMacro2()  name_info(','VSARG2_REQUIRES_EDITORCTL|VSARG2_REQUIRES_PRO_EDITION|VSARG2_MARK)
    {
    _begin_select();
    _str text = hs2_cur_word_sel();

    // Find end of statement. This handles multiple-line statements.
    search(";","@hXcs");

    insert_blankline_below();
    if (p_LangId == 'java') {
        _insert_text('printf("' :+ escape_string(text, true) :+ '\n");');
    } else if (p_LangId == 'c') {
        _insert_text('printf("' :+ escape_string(text, true) :+ '\n");');
    }
    }

    _str escape_string(_str text, boolean do_esc)
    {
        if (do_esc) {
            text = stranslate(text, "\\\\", "\\");
            text = stranslate(text, "\\\"", "\"");
    #if 0
            text = stranslate(text, "\\r",  "\r");
            text = stranslate(text, "\\n",  "\n");
            text = stranslate(text, "\\t",  "\t");
    #endif
        } else {
            text = stranslate(text, "\xFF", "\\\\");
            text = stranslate(text, "\"",   "\\\"");
            text = stranslate(text, "\t",   "\\t");
            text = stranslate(text, "\n",   "\\n");
            text = stranslate(text, "\r",   "\\r");
            text = stranslate(text, "\\",   "\xFF");
        }
        return (text);
    }
[/code]

